---
sudo: required

# env:
#   global:
#   - VAGRANT_VERSION="2.2.9"

notifications:
  slack:
    on_failure: always

# fleet_script_vagrant_win_scoop_tasks : &fleet_script_vagrant_win_scoop_tasks
#       script:
#           - echo "============================================="
#           - echo "=============Installing Vagrant scoop=============="
#           # - Set-ExecutionPolicy RemoteSigned -scope CurrentUser
#           # - Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
#           # - iwr -useb get.scoop.sh | iex # or shorter #The command "iwr -useb get.scoop.sh | iex" exited with 127.
#           # - scoop install vagrant
#           # - vagrant version
#           - echo "============================================="
# fleet_script_vagrant_win_tasks : &fleet_script_vagrant_win_tasks
#       script:
#           - echo "============================================="
#           - echo "=============Installing Vagrant chocolatey=============="
#           # - choco feature disable --name=exitOnRebootDetected #exitOnRebootDetected was disabled by default. Explicitly setting value
#           # - choco install vagrant # https://github.com/chocolatey/choco/issues/1927
#           # - choco install vagrant --version 2.2.0
#           # - choco install vagrant --${VAGRANT_VERSION}
#           # - vagrant version #Packages requiring reboot: - vagrant (exit code 3010)
#           - echo "============================================="
# fleet_script_vagrant_macos_tasks : &fleet_script_vagrant_macos_tasks
#       script:
#           - echo "============================================="
#           - echo "=============Installing Vagrant=============="
#           - /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" #Install Homebrew
#           # - brew doctor
#           - brew update
#           # - brew cask install virtualbox #Install Virtual Box Cask
#           - brew search vagrant
#           - brew cask install vagrant #Install Vagrant Casks
#           - vagrant version
#           - vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
#           - vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
#           - vagrant status
#           - vagrant box add "bento/centos-8.0"  --provider=virtualbox
#           - vagrant mutate "bento/centos-8.0"  libvirt
#           - vagrant global-status
#           - vagrant up --provider=libvirt
#           - vagrant global-status
#           # - vagrant ssh -c "hostnamectl"
#           - echo "============================================="
# fleet_script_vagrant_tasks : &fleet_script_vagrant_tasks
#       script:
#           - sudo apt-get install -y cpu-checker bridge-utils dnsmasq-base ebtables libvirt-bin libvirt-dev qemu-kvm qemu-utils ruby-dev
#           - sudo systemctl status libvirtd
#           - sudo libvirtd --version
#           - egrep -c '(vmx|svm)' /proc/cpuinfo #If 0 it means that your CPU doesn't support hardware virtualization.If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.
#           - sudo addgroup libvirtd
#           - sudo adduser  $(id -un) libvirtd #ensure that your username is added to the group libvirtd
#           - sudo kvm-ok
#           - echo "============================================="
#           - echo "=============Installing Vagrant=============="
#           - sudo wget -nv https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_x86_64.deb
#           - sudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb
#           - vagrant version
#           - echo "============================================="
#           - sudo vagrant plugin install vagrant-libvirt #The vagrant-libvirt plugin is required when using KVM on Linux
#           - sudo vagrant plugin install vagrant-mutate #Convert vagrant boxes to work with different providers
#           - sudo vagrant status
#           - sudo virsh list --all #show all running KVM/libvirt VMs
#           - sudo vagrant box add "bento/centos-8.1" --provider=virtualbox
#           - sudo vagrant mutate "bento/centos-8.1" libvirt
#           # - sudo vagrant up --provider=libvirt
#           - sudo vagrant up --provider=libvirt vg-concourseci01
#           - sudo vagrant box list #veridy installed boxes
#           - sudo vagrant status #Check the status of the VMs to see that none of them have been created yet
#           # - sudo vagrant up --provider=libvirt foremansrv01
#           # - sudo vagrant up --no-parallel --provider=libvirt # vagrant serial runs
#           # - travis_wait 30 sudo vagrant up --provider=libvirt
#           - sudo vagrant status
#           - sudo vagrant global-status
#           # - sudo vagrant ssh foremansrv01 -c "curl https://foremansrv01.local"
#           # - sudo vagrant ssh -c "hostnamectl"
#           - sudo virsh list --all #show all running KVM/libvirt VMs
# fleet_script_tasks : &fleet_script_tasks
#       script:
#         - python --version
# fleet_install_tasks : &fleet_install_tasks
#       install:
#         - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    - name: "build Vagrant and Libvirt with KVM or QEMU - bionic"
      dist: bionic
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
          - sudo make deploy-libvirt
          - sudo make deploy-vagrant
          - sudo make deploy-boxes
      # <<: *fleet_install_tasks
      # <<: *fleet_script_tasks
      # <<: *fleet_script_vagrant_tasks
      after_success:
        - deactivate
